BEGIN check_guess(guess, target)
    """Checks a guess to see if it is the same as the target.

    Complete this  function using binary selection 

    Args:
        guess: int - the guessed number
        target: int - the correct or target number

    Returns:
        winner: bool - True if correct guess otherwise false

    """
    
    IF guess equal to target THEN
        RETURN True
    ELSE
        RETURN false
    ENDIF

END subprogram

BEGIN ultimate_answer(question)
    """Provides an answer to the ultimate question.

    Returns '42' if the question is 'What is the meaning of Life, The Universe,
    Everything?' otherwise returns 'That is not much of a question'
    
    args:
        question (str): The question to be answered.
        
    returns:
        str
    """

    IF question equal to "What is the meaning of Life, The Universe, Everything?" THEN
        answer equals 42
    ELSE
        answer equals "That is not much of a question"
    ENDIF

    RETURN answer

END subprogram
    
BEGIN check_guess_multi(guess, target)
    """Checks a guess to see if it is the same as the target.

    If the guess is incorrect, prompts the player to guess higher
    or lower as appropriate.

    Complete this  function using multi-way selection 

    Args:
        guess: int - the guessed number
        target: int - the correct or target number

    Returns:
        prompt: str - "higher", "lower" or "correct"

    """
    WHILE guess not equal to target
        IF guess less than target THEN
            prompt user to enter a lower number
        ELSE
            prompt user to enter a higher number
        ENDIF
    PRINT Correct

END subprogram

BEGIN factorial(num)
    """Calculates the factorial of a number.

    Use pre-test repetition to write a function that computes the factorial of a number.
    A factorial of a number is the product of all the positive integers
    less than it.
    For example 4 factorial is 4 x 3 x 2 x 1 = 24 

    Args:
        num: int - the number for which to calculate the factorial
        
    Returns:
        fact: the factorial of num
    """
    
    INITIALISATION
    iteration count set to 0
    fact set to 1
    END INITIALISATION

    WHILE iteration is less than num
        FOR index in range 1 to num+1
            iteration count add 1
            fact equals fact multiplied by index
        RETURN fact
    ENDWHILE

END subprogram

BEGIN add_array(in_array)
    """Adds the elements of an array.

    Use counted repetition, using a start, finish and a step, to sum the
    elements of an array

    Args:
        in_array: array if numbers to be added

    Returns:
        sum: the sum of the array
    """

    BEGIN INITIALISATION
    sum count is set to 0
    END INITIALISATION

    FOR index in range 0 to length of in_array
        add sum and index of in_array
    
    RETURN sum

END subprogram
